import os
import pandas as pd
import numpy as np
import tensorflow as tf

# ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file CSV v√† m√¥ h√¨nh
base_dir = os.path.dirname(os.path.abspath(__file__))
info_path = os.path.join(base_dir, "data/hospital_info.csv")
predict_path = os.path.join(base_dir, "data/hospital_predict.csv")
model_path = os.path.join(base_dir, "models/hospital_recommender.keras")

# Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa file CSV v√† m√¥ h√¨nh
if not os.path.exists(info_path):
    raise FileNotFoundError(f"‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y file `{info_path}`. H√£y ki·ªÉm tra l·∫°i!")
if not os.path.exists(predict_path):
    raise FileNotFoundError(f"‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y file `{predict_path}`. H√£y ki·ªÉm tra l·∫°i!")
if not os.path.exists(model_path):
    raise FileNotFoundError(f"‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh `{model_path}`. H√£y train m√¥ h√¨nh tr∆∞·ªõc!")

# ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file CSV
hospital_info = pd.read_csv(info_path)
predict_df = pd.read_csv(predict_path)

# (·ªû ƒë√¢y m√¥ h√¨nh kh√¥ng ƒë∆∞·ª£c d√πng ƒë·ªÉ g·ª£i √Ω v√¨ ta d√πng d·ªØ li·ªáu c√≥ s·∫µn)
@tf.keras.utils.register_keras_serializable()
class RecommenderModel(tf.keras.models.Model):
    def __init__(self, num_tumor_types, num_hospitals, embedding_dim=50):
        super(RecommenderModel, self).__init__()
        self.num_tumor_types = num_tumor_types
        self.num_hospitals = num_hospitals
        self.embedding_dim = embedding_dim

        self.tumor_embedding = tf.keras.layers.Embedding(num_tumor_types, embedding_dim)
        self.hospital_embedding = tf.keras.layers.Embedding(num_hospitals, embedding_dim)
        self.dot = tf.keras.layers.Dot(axes=1)

    def call(self, inputs):
        tumor_vec = self.tumor_embedding(inputs[:, 0])
        hospital_vec = self.hospital_embedding(inputs[:, 1])
        return self.dot([tumor_vec, hospital_vec])

    def get_config(self):
        return {
            "num_tumor_types": self.num_tumor_types,
            "num_hospitals": self.num_hospitals,
            "embedding_dim": self.embedding_dim
        }

    @classmethod
    def from_config(cls, config):
        return cls(**config)

# Load m√¥ h√¨nh (kh√¥ng s·ª≠ d·ª•ng cho ph·∫ßn g·ª£i √Ω d∆∞·ªõi ƒë√¢y)
model = tf.keras.models.load_model(model_path, custom_objects={"RecommenderModel": RecommenderModel})

# Mapping cho c√°c lo·∫°i kh·ªëi u c·ªßa c√°c nh√≥m ƒëi·ªÅu tr·ªã (kh√¥ng bao g·ªìm no_tumor)
tumor_mapping = {
    "glioma_tumor": 1,
    "meningioma_tumor": 2,
    "pituitary_tumor": 4
}

def recommend_hospitals(tumor_type, top_n=3):
    """
    Tr·∫£ v·ªÅ danh s√°ch g·ª£i √Ω b·ªánh vi·ªán d·ª±a tr√™n tumor_id.
    N·∫øu tumor_type l√† "no_tumor", ch·ªâ tr·∫£ v·ªÅ c√°c b·ªánh vi·ªán c√≥ tumor_id = 3.
    """
    # N·∫øu ch·ªçn "no_tumor", ƒë·∫∑t target_tumor_id = 3
    if tumor_type == "no_tumor":
        target_tumor_id = 3
    elif tumor_type in tumor_mapping:
        target_tumor_id = tumor_mapping[tumor_type]
    else:
        print("‚ö† Lo·∫°i kh·ªëi u kh√¥ng h·ª£p l·ªá!")
        return None

    # L·ªçc c√°c d√≤ng trong predict_df theo tumor_id
    filtered = predict_df[predict_df["tumor_id"] == target_tumor_id].copy()
    filtered["hospital_rating"] = pd.to_numeric(filtered["hospital_rating"], errors="coerce")
    # S·∫Øp x·∫øp theo hospital_rating gi·∫£m d·∫ßn
    filtered = filtered.sort_values(by="hospital_rating", ascending=False)
    
    # Merge v·ªõi hospital_info theo hospital_id ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt
    merged = pd.merge(filtered, hospital_info, on="hospital_id", how="left")
    
    # Tr·∫£ v·ªÅ top_n b·ªánh vi·ªán k√®m th√¥ng tin c·∫ßn hi·ªÉn th·ªã
    return merged.head(top_n)[["hospital_name", "hospital_address", "hospital_tel", "hospital_web", "hospital_rating"]]

# N·∫øu ch·∫°y file n√†y tr·ª±c ti·∫øp, hi·ªÉn th·ªã c√°c b·ªánh vi·ªán cho tumor_id = 3 (no_tumor)
if __name__ == "__main__":
    print("\nüîπ G·ª£i √Ω b·ªánh vi·ªán cho lo·∫°i kh·ªëi u: NO_TUMOR (tumor_id = 3)")
    recs = recommend_hospitals("no_tumor", top_n=10)
    if recs is not None:
        print(recs.to_string(index=False))
