import os
import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
import json

# ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file CSV (ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
INFO_PATH = os.path.join(BASE_DIR, "data/hospital_info.csv")
PREDICT_PATH = os.path.join(BASE_DIR, "data/hospital_predict.csv")

# Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa file CSV
if not os.path.exists(INFO_PATH):
    raise FileNotFoundError(f"‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y file `{INFO_PATH}`. H√£y ki·ªÉm tra l·∫°i!")
if not os.path.exists(PREDICT_PATH):
    raise FileNotFoundError(f"‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y file `{PREDICT_PATH}`. H√£y ki·ªÉm tra l·∫°i!")

# ƒê·ªçc d·ªØ li·ªáu
hospital_info = pd.read_csv(INFO_PATH)
predict_df = pd.read_csv(PREDICT_PATH)

# Chuy·ªÉn hospital_rating sang ki·ªÉu s·ªë
predict_df["hospital_rating"] = pd.to_numeric(predict_df["hospital_rating"], errors="coerce")
predict_df = predict_df.dropna(subset=["hospital_rating"])

# √Ånh x·∫° tumor_id sang nh√£n
tumor_map = {
    1: "glioma_tumor",
    2: "meningioma_tumor",
    3: "no_tumor",
    4: "pituitary_tumor"
}
predict_df["tumor_label"] = predict_df["tumor_id"].map(tumor_map)

# T·∫°o b·∫£ng pivot: h√†ng = hospital_id, c·ªôt = tumor_label, gi√° tr·ªã = hospital_rating
pivot_df = predict_df.pivot_table(index="hospital_id", columns="tumor_label", values="hospital_rating")
# ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng gi√° tr·ªã trung b√¨nh c·ªßa c·ªôt
pivot_df = pivot_df.apply(lambda col: col.fillna(col.mean()), axis=0)
pivot_df = pivot_df.sort_index()

def recommend_hospitals_knn(tumor_type, k=10):
    """
    Cho m·ªôt lo·∫°i tumor (v√≠ d·ª• "glioma_tumor"), h·ªá th·ªëng t·∫°o vector truy v·∫•n:
      - ·ªû c·ªôt t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i tumor ƒë√≥: ƒë·∫∑t gi√° tr·ªã 5 (y√™u c·∫ßu t·ªëi ƒëa).
      - ·ªû c√°c c·ªôt kh√°c: s·ª≠ d·ª•ng gi√° tr·ªã trung b√¨nh c·ªßa c·ªôt.
    Sau ƒë√≥, d√πng KNN ƒë·ªÉ t√¨m k b·ªánh vi·ªán c√≥ vector rating g·∫ßn nh·∫•t.
    Tr·∫£ v·ªÅ DataFrame ch·ª©a th√¥ng tin c·ªßa c√°c b·ªánh vi·ªán (k·∫øt h·ª£p t·ª´ hospital_info)
    c√πng v·ªõi hospital_rating ƒë∆∞·ª£c l·∫•y tr·ª±c ti·∫øp t·ª´ pivot_df.
    
    N·∫øu tumor_type l√† "no_tumor", tr·∫£ v·ªÅ to√†n b·ªô b·ªánh vi·ªán v·ªõi Note tham kh·∫£o.
    """
    if tumor_type not in tumor_map.values():
        print("‚ö† Lo·∫°i tumor kh√¥ng h·ª£p l·ªá!")
        return None

    if tumor_type == "no_tumor":
        df = hospital_info.copy()
        df["Note"] = "ƒê√¢y l√† c√°c b·ªánh vi·ªán cho b·∫°n tham kh·∫£o."
        return df

    query = pivot_df.mean(axis=0).to_dict()
    query[tumor_type] = 5.0
    query_vector = np.array([query[col] for col in pivot_df.columns]).reshape(1, -1)

    nbrs = NearestNeighbors(n_neighbors=k, metric="euclidean")
    nbrs.fit(pivot_df.values)
    distances, indices = nbrs.kneighbors(query_vector)

    recommended_ids = pivot_df.index[indices.flatten()]
    rec_df = hospital_info[hospital_info["hospital_id"].isin(recommended_ids)].copy()
    # ·ªû ƒë√¢y, ta v·∫´n merge rating g·ªëc ƒë·ªÉ hi·ªÉn th·ªã g·ª£i √Ω
    rec_df = rec_df.merge(pivot_df[[tumor_type]].reset_index(), on="hospital_id", how="left")
    rec_df.rename(columns={tumor_type: "hospital_rating"}, inplace=True)
    rec_df = rec_df.sort_values(by="hospital_rating", ascending=False)
    return rec_df

def evaluate_knn(tumor_types=["glioma_tumor", "meningioma_tumor", "pituitary_tumor"], k=10):
    """
    V·ªõi m·ªói lo·∫°i tumor (ngo·∫°i tr·ª´ no_tumor), ta x√¢y d·ª±ng vector truy v·∫•n:
      - ƒê·∫∑t gi√° tr·ªã t·ªëi ƒëa (5.0) cho c·ªôt t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i tumor ƒë√≥,
      - D√πng KNN v·ªõi k l√°ng gi·ªÅng ƒë·ªÉ l·∫•y c√°c gi√° tr·ªã rating.
    Sau ƒë√≥, t√≠nh d·ª± ƒëo√°n rating l√† trung b√¨nh tr·ªçng s·ªë c·ªßa c√°c rating c·ªßa k l√°ng gi·ªÅng,
    v·ªõi weight = 1/(distance + epsilon).
    So s√°nh v·ªõi gi√° tr·ªã l√Ω t∆∞·ªüng l√† 5.0 v√† t√≠nh RMSE, MAE.
    Tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a RMSE, MAE v√† chi ti·∫øt l·ªói cho t·ª´ng tumor.
    """
    errors = {}
    for tumor in tumor_types:
        query = pivot_df.mean(axis=0).to_dict()
        query[tumor] = 5.0
        query_vector = np.array([query[col] for col in pivot_df.columns]).reshape(1, -1)
        nbrs = NearestNeighbors(n_neighbors=k, metric="euclidean")
        nbrs.fit(pivot_df.values)
        distances, indices = nbrs.kneighbors(query_vector)
        neighbor_ratings = pivot_df[tumor].iloc[indices.flatten()].values
        weights = 1 / (distances.flatten() + 1e-6)
        predicted_rating = np.sum(weights * neighbor_ratings) / np.sum(weights)
        error = 5.0 - predicted_rating
        errors[tumor] = error
        print(f"{tumor}: Predicted = {predicted_rating:.4f}, Error = {error:.4f}")
    rmse = np.sqrt(np.mean(np.array(list(errors.values()))**2))
    mae = np.mean(np.abs(np.array(list(errors.values()))))
    knn_metrics = {
        "rmse": rmse,
        "mae": mae,
        "details": errors
    }
    return knn_metrics

if __name__ == "__main__":
    # In ra g·ª£i √Ω cho t·ª´ng lo·∫°i tumor (v√≠ d·ª• v·ªõi k=10)
    for tumor in ["glioma_tumor", "meningioma_tumor", "pituitary_tumor", "no_tumor"]:
        print(f"\nüîπ G·ª£i √Ω top 10 b·ªánh vi·ªán cho lo·∫°i tumor: {tumor}")
        recs = recommend_hospitals_knn(tumor, k=10)
        if recs is not None:
            print(recs.to_string(index=False))
    
    # ƒê√°nh gi√° m√¥ h√¨nh KNN cho c√°c lo·∫°i tumor (ngo·∫°i tr·ª´ no_tumor)
    knn_metrics = evaluate_knn()
    with open("knn_metrics.json", "w") as f:
        json.dump(knn_metrics, f, indent=4)
    print("KNN metrics ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o knn_metrics.json")
